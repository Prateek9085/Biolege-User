import '../../screens/rootView.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:stacked_services/stacked_services.dart';
import '../../app/locator.dart';
import '../../app/router.gr.dart';
import '../../widgets/dialog.dart';
import '../../misc/errors/errors.dart';

class AuthenticationService {
  // __________________________________________________________________________
  // Locating the Dependencies
  final NavigationService _navigatorService = locator<NavigationService>();
  final DialogService _dialogService = locator<DialogService>();
  final SnackbarService _snackbarService = locator<SnackbarService>();
// ____________________________________________________________________________
  // Initialise a firebase instance for the app in the starting.
  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  // The verification ID generated by Firebase for Phone Number Authentication
  String _verificationId;
  int _resendToken;
  String _phoneNumber;

  String get getEnteredPhoneNumber => _phoneNumber;

  // __________________________________________________________________________

  // This function takes a Verification Code provided by Firebase and an
  // OTP recieved by the user and authentication with the credentials.
  Future signInPhoneNumberWithOTP(String otp) async {
    // ________________________________________________________________________

    try {
      AuthCredential authCreds = PhoneAuthProvider.credential(
          verificationId: _verificationId, smsCode: otp);

      await _firebaseAuth.signInWithCredential(authCreds);
      final User currentUser = _firebaseAuth.currentUser;
      // Routes to the Root to reroute to signup screens
      // if user is logged in
      if (currentUser.uid.isNotEmpty) {
        await _dialogService.showCustomDialog(
            variant: DialogType.confirm,
            barrierDismissible: false,
            mainButtonTitle: "OK",
            description: "You have been signed in. Press OK to continue");
        _navigatorService.clearStackAndShow(Root.routeName);
      }
    } catch (authException) {
      // Popups a snackbar with wrong OTP error
      print(authException);
      String returnedErrorMessage = errorDescription(authException.code);

      _snackbarService.showSnackbar(
          mainButtonTitle: "Read More",
          onTap: (_) => _dialogService.showCustomDialog(
              barrierDismissible: true,
              variant: DialogType.basic,
              title: authException.code.toString().toUpperCase(),
              description: returnedErrorMessage),
          message: returnedErrorMessage);
      return false;
    }
  }

  // ___________________________________________________________________________
  // This function takes a forcedVerification Code provided by Firebase and a
  // resends the OTP
  Future resendOTP() async {
    try {
      print("Resend OTP called: " + _verificationId.toString());
      // Function to call signin with credential which returns the verfication
      // Id in the callback function "codeAutoRetrievalTimeout"
      PhoneVerificationCompleted verificationCompleted =
          (PhoneAuthCredential phoneAuthCredential) {};
      // ----------------------------------------------------------------------
      // Function to handle errors thrown by Firebase
      PhoneVerificationFailed verificationFailed =
          (FirebaseAuthException authException) async {
        // ------------------------------------------------------
        // Showing a dialog to the user for the thrown exception
        String returnedError = errorDescription(authException.code);
        await _dialogService.showCustomDialog(
          barrierDismissible: false,
          variant: DialogType.basic,
          title: authException.code.toUpperCase(),
          description: returnedError,
        );
        // ------------------------------------------------------
      };
      // ----------------------------------------------------------------------
      // Notification function for verification Id.
      PhoneCodeSent codeSent =
          (String verificationId, [int forceResendingToken]) async {
        _verificationId = verificationId;
        _resendToken = forceResendingToken;
        _snackbarService.showSnackbar(
            title: 'We resent you the OTP on', message: _phoneNumber);
      };
      // ----------------------------------------------------------------------
      // Function to retrive verification ID from the firebase
      PhoneCodeAutoRetrievalTimeout codeAutoRetrievalTimeout =
          (String verificationId) {
        _verificationId = verificationId;
      };
      // ----------------------------------------------------------------------
      // Call the Verify Phone Number method to initialize verification process
      // from Firebase. Entry point of the Mobile Authentication
      await _firebaseAuth.verifyPhoneNumber(
          timeout: Duration(seconds: 30),
          phoneNumber: _phoneNumber,
          forceResendingToken: _resendToken,
          verificationCompleted: verificationCompleted,
          verificationFailed: verificationFailed,
          codeSent: codeSent,
          codeAutoRetrievalTimeout: codeAutoRetrievalTimeout);
    }
    // ----------------------------------------------------------------------
    catch (e) {
      await _dialogService.showCustomDialog(
          barrierDismissible: true,
          variant: DialogType.basic,
          title: "Unknown",
          description: e.message.toString() == null
              ? "Something went wrong"
              : e.message.toString());
    }
  }

  // ___________________________________________________________________________
  Future verifyPhoneNumber(String phoneNumber) async {
    try {
      _phoneNumber = phoneNumber;
      print("Verify OTP called: " + phoneNumber.toString());
      // Function to call signin with credential which returns the verfication
      // Id in the callback function "codeAutoRetrievalTimeout"
      PhoneVerificationCompleted verificationCompleted =
          (PhoneAuthCredential phoneAuthCredential) async {
        await _firebaseAuth.signInWithCredential(phoneAuthCredential);
        final User currentUser = _firebaseAuth.currentUser;
        // Routes to the Root to reroute to signup screens
        // If user is logged in
        if (currentUser.uid.isNotEmpty) {
          await _dialogService.showCustomDialog(
              variant: DialogType.confirm,
              barrierDismissible: false,
              mainButtonTitle: "OK",
              description:
                  "We have detected the OTP and autoverified you and automatically signed you in.\nPress OK to continue");
          _navigatorService.clearStackAndShow(Root.routeName);
        }
      };
      // ----------------------------------------------------------------------
      // Function to handle errors thrown by Firebase
      PhoneVerificationFailed verificationFailed =
          (FirebaseAuthException authException) async {
        // ------------------------------------------------------
        // Showing a dialog to the user for the thrown exception
        String returnedError = errorDescription(authException.code);
        print(authException);
        await _dialogService.showCustomDialog(
          barrierDismissible: true,
          variant: DialogType.basic,
          title: authException.code.toUpperCase(),
          description: returnedError,
        );
        // ------------------------------------------------------
      };
      // ----------------------------------------------------------------------
      // Notification function for verification Id.
      PhoneCodeSent codeSent =
          (String verificationId, [int forceResendingToken]) async {
        print('Please check your phone for the verification code.\n' +
            verificationId);
        _verificationId = verificationId;
        _resendToken = forceResendingToken;
        _navigatorService.navigateTo(Routes.oTPScreenView);
      };
      // ----------------------------------------------------------------------
      // Function to retrive verification ID from the firebase
      PhoneCodeAutoRetrievalTimeout codeAutoRetrievalTimeout =
          (String verificationId) {
        _verificationId = verificationId;
      };
      // ----------------------------------------------------------------------
      // Call the Verify Phone Number method to initialize verification process
      // from Firebase. Entry point of the Mobile Authentication
      await _firebaseAuth.verifyPhoneNumber(
          phoneNumber: _phoneNumber,
          timeout: Duration(seconds: 30),
          verificationCompleted: verificationCompleted,
          verificationFailed: verificationFailed,
          codeSent: codeSent,
          codeAutoRetrievalTimeout: codeAutoRetrievalTimeout);
      // ----------------------------------------------------------------------
    } catch (e) {
      print(e.toString());
      await _dialogService.showCustomDialog(
        barrierDismissible: true,
        variant: DialogType.basic,
        title: "Unknown",
        description: e.message.toString() == null
            ? "Something went wrong"
            : e.message.toString(),
      );
    }
  }

  // __________________________________________________________________________

  // This function return whether is already logged in or not
  Future<bool> isUserLoggedIn() async {
    var user = _firebaseAuth.currentUser;
    return user != null;
  } // __________________________________________________________________________

  // This function return whether is already logged in or not
  Future<bool> isAuthChanged() async {
    var user = _firebaseAuth.authStateChanges();
    return user != null;
  }
  // __________________________________________________________________________

  // Logs Out the user
  Future<void> signOut() async {
    SharedPreferences _localStorage = await SharedPreferences.getInstance();
    await _firebaseAuth.signOut();
    await _localStorage.clear();
    _navigatorService.pushNamedAndRemoveUntil(Routes.onBoardingScreen,
        predicate: (route) => false);
  }

  // __________________________________________________________________________
}
